<?php

function dh_ecology_schema() {
   // 
   $schema['dh_ecology_isolate'] = array (
     'description' => 'Repository of plant sample DNA isolate',
     'fields' => array(
       'iid' => array(
         'description' => 'Isolate ID - Primary key for Variables',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE,
       ),
      'isolate' => array(
         'description' => 'Isolate Unique Text Identifier',
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
       ),
      'species' => array(
         'description' => 'Species',
         'type' => 'varchar',
         'length' => 255,
         'not null' => FALSE,
         'default' => '',
       ),
      'source' => array(
         'description' => 'Data Source (lab or collector)',
         'type' => 'varchar',
         'length' => 128,
         'not null' => FALSE,
         'default' => '',
       ),
      'acquisition_num' => array(
         'description' => 'Acquisition Number (Gen Bank)',
         'type' => 'varchar',
         'length' => 32,
         'not null' => FALSE,
         'default' => '',
       ),
      'its_sequence' => array(
         'description' => 'ITS Sequence',
         'type' => 'text',
         'size' => 'big',
         'not null' => FALSE,
         'default' => '',
         'translatable' => false,
       ),

     ) + entity_exportable_schema_fields(),
     'primary key' => array('iid'),
     'indexes' => array(
       'de_iso_iix' => array('iid'),
       'de_iso_isix' => array('isolate'),
       'de_iso_six' => array('source'),
       'de_iso_spix' => array('species'),
       'de_iso_aix' => array('acquisition_num'),
       'de_iso_itsix' => array('its_sequence'),
    )
  );

  return $schema;
}

function dh_ecology_uninstall() {
}


function dh_ecology_references() {
  $refdefs = array();
  // add references
  $refdefs[] = array(
    'fieldname' => 'dh_link_isolate_mps',
    'src_type' => 'dh_ecology_isolate',
    'src_bundle' => 'dh_ecology_isolate',
    'dest_type' => 'dh_feature',
    'dest_bundle' => array('plant_tissue_sample'),
    'label' => 'Source Plant Tissue Sample',
    'select_type' => 'entityreference_autocomplete'
  );

  return $refdefs;
}

function dh_ecology_install() {
  // add bundles
  dh_ecology_add_bundles();
  //dh_ecology_add_views();
  
  // add references
  $refdefs = dh_ecology_references();
  dh_add_references($refdefs);
  
  // set up fields here
  $fields_fields = array(
    'plant_tissue_sample' => array(
      'dh_geofield' => array('label' => 'Geometry', 'type' => 'geofield', 'display' => 'geofield_wkt', 'widget' => 'geofield_wkt'),
    ),
  );
  foreach ($fields_fields as $key => $thistype) {
    dh_initialize_fields($key, '', 'dh_feature', $fields_fields);
  }
}

function dh_ecology_add_bundles() {
  $typedefs = array(
    'plant_tissue_sample' => array('bundle' => 'plant_tissue_sample', 'name' => 'Plant Tissue Sample', 'description' => 'dH Ecology Plant Tissue Sample and Site'),
  );

  foreach ($typedefs as $key => $thistype) {
    dh_base_feature_type_save($thistype);
    //dh_initialize_fields($key);
  }
}

function dh_ecology_define_views() {
  $views = array();
  /*
  $views['dh_views_last_weather24'] = "  create or replace view {dh_views_last_weather24} as ";
  $views['dh_views_last_weather24'] .= " select a.featureid, ";
  $views['dh_views_last_weather24'] .= "   a.tstime as tsendtime, min(b.tstime) as tstime, ";
  $views['dh_views_last_weather24'] .= "   sum(b.rain) as rain, sum(b.wet_min) as wet_min, ";
  $views['dh_views_last_weather24'] .= "   avg(b.temp) as temp, avg(b.rh) as rh ";
  $views['dh_views_last_weather24'] .= " from ( ";
  $views['dh_views_last_weather24'] .= "   select a.featureid, max(a.tstime) as tstime ";
  $views['dh_views_last_weather24'] .= "   from {dh_timeseries_weather} as a ";
  $views['dh_views_last_weather24'] .= "   left outer join {dh_variabledefinition} as b ";
  $views['dh_views_last_weather24'] .= "   on ( a.varid = b.varid and b.varkey = 'weather_obs' ) ";
  $views['dh_views_last_weather24'] .= "   where b.varid is not null ";
  $views['dh_views_last_weather24'] .= " ) as a ";
  */
  return $views;
}

function dh_ecology_add_views($views = array()) {
  $allviews = dh_ecology_define_views();
  if (count($views) == 0) {
    $views = array_keys($allviews);
  }
  foreach ($views as $viewname => $viewsql) {
    db_query( $viewsql );
  }
}
  
/*
function dh_ecology_update_7101() {
  db_query("alter table {dh_timeseries_weather} add column tsendtime bigint default 0 ");
  drupal_set_message(t("Added and initialized default on dh_timeseries_weather tsendtime column."));
}
*/

